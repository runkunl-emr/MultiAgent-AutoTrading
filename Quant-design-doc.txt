 Quant Trading bot design doc 
 Glossary 
 Problem 
 1.  Human is emotional - we want to leverage machine based trading system to eliminate 
 human footprint as much as possible. 
 2.  We lived in a timezone that not in U.S. time. With the timezone difference we are hard to 
 keep awake and focus when market open 
 3.  We want to have high rewards on trading high risk financial products. Like crypto/future/ 
 杠杠index like TQQQ/TSLL. But we do not know how much risk we carry compare to the 
 gain. 
 4.  We are software engineers that have certain expertise on programing and AI, which 
 want to leverage that. But we lack of the proper/fundamental knowledge about financial 
 part. We are navigating in dark so we want to seek help to address this . So we need 
 something expert on this alpha to educate us, instruct us what to do. 
 Schedule 
 3.30~4.6 
 Goal: Complete a runnable program and implement basic trading functionality before next 
 week's meeting. 
 Requirements/constraints 
 ⼀、⾃动 交易机器⼈（ Trading Bot ）需求  
 ●  ⾃动化执 ⾏能⼒（ Automation ）  
 ○  系统必须能够 实时、 ⾃ 动 地 监 听和解析⾦融 Alert （来⾃ Discord 或类似平台）。  
 ○  ⾃动将 Alert 转 化 为 券商 API 所需的 标 准交易指令，并⾃ 动执 ⾏。  

 ●  衡量指标：  
 ○  ⾃动交易 Alert 覆盖率  ≥ 95% （即不需⼈ 为 ⼲ 预 直接交易成功的 Alert ⽐例）。  
 ○  从接收 Alert到 实际 下 单 的端到端延 迟  ≤ 500 ms 。  
 ●  【备注：考 虑到你 们 的情 绪问题，这 ⾥明确⾃ 动 化覆盖率和延 迟 指 标 是关 键 的。】  
 ●  风险管理（ Risk Management ）  
 ○  系统需具 备基本的 风险 管理功能，包括⾃ 动 ⽌ 损（ Stop-loss ）和⽌盈（ Take-profit 
 ）。 
 ○  系统应能够 识 别并防⽌异常⼤ 额亏损 或⾮正常交易⾏ 为（ 如交易⾦ 额 超出 预 定限  
 额）。  
 ●  衡量指标：  
 ○  单笔交易 亏损 控制在 总账户资产 的  ≤ 2% 。  
 ○  系统能够准确 识 别并停⽌超 过预 定 风险阈值 的交易  ≥ 99% 。  
 ●  【备注：⾃ 动 化系 统 必 须 有清晰的 风险 控制机制防⽌意外 风险， 尤其是⾼波 动 性品种。】  
 ⼆、策略 评 估和 组 合管理机器⼈（ Regression & Portfolio Bot ）  
 ●  策略回测 与 评 估能⼒（ Strategy Backtesting ）  
 ○  提供明确的 历 史回 测 功能，⽀持策略有效性的⾃ 动验证。  
 ○  系统可以使⽤ 过去⾄少 1 年的 历 史数据， 对 新策略 进 ⾏回 测 和 绩 效 评 估。  
 ●  衡量指标：  
 ○  提供的回 测 指 标 包括但不限于：  
 ■  累积收益率（ Cumulative Return ）   【整体盈利能⼒】  
 ■  年化收益率（ Annualized Return ）   【投资回 报年平均】  
 ■  最⼤回撤（ Max Drawdown ）   【投资期 间 最⼤的 资产缩 ⽔幅度，越⼩越  
 好】 

 ■  夏普⽐率（ Sharpe Ratio ）   【衡量收益和 风险 的⽐例，数 值 越⾼越佳，通  
 常>1即良好】  
 ●  【备注： 这 些指 标 是⾏ 业 内 标 准，也是通俗易懂的衡量⽅式，你可以通 过 它 们 直 观 看到策  
 略优劣。】  
 ●  投资组合⾃ 动 管理能⼒（ Portfolio Management ）  
 ○  系统能够定期⾃ 动进 ⾏投 资组 合再平衡（ Rebalancing ），维 持 账户 内 资产 配置在  
 预定范围内。  
 ●  衡量指标：  
 ○  每⽉⾃动进 ⾏⼀次再平衡，确保 实际资产组 合偏离⽬ 标组 合的 误 差  ≤ 5% 。  
 ○  再平衡成功 执 ⾏率  ≥ 95% （⽆需⼈⼯⼲ 预 即可 顺 利完成）。  
 ●  【备注： 组 合再平衡确保你 们 的投 资 ⼀直 处 于你 预 期的 风险 收益平衡状 态。】  
 三、策略 组 合与 优 化能⼒（ Strategy Combination & Optimization ）  
 ●  外部策略和⾃定 义 策略的整合能⼒  
 ○  ⽀持⾃动 接⼊外部策略（来⾃⾦融 Alert ）与⽤ 户 ⾃定 义 策略的 结 合，并能⾃ 动执  
 ⾏策略对 ⽐和 优 化。  
 ●  衡量指标：  
 ○  系统每⽉可⽀持⾄少 1-3 个外部策略接⼊与整合。  
 ○  ⾃动对⽐新旧策略效果， 输 出 对 ⽐ 报 告成功率  ≥ 95% 。  
 ●  【备注：明确了外部策略的整合和⾃有策略 对 ⽐，使系 统 可以 验证 哪种策略 组 合更有  
 效。】  
 四、成本控制与性能要求（ Cost & Performance ）  
 ●  成本效益控制（ Cost Control ）  
 ○  系统每⽉的 运 ⾏成本（包括服 务 器、券商 API 、数据 订阅费 ⽤） 应 在 团队设 定的 预  
 算范围内。  

 ●  衡量指标：  
 ○  每⽉运⾏ 总 成本  ≤ 设 定的⽉度 预 算上限（如 $500 USD ）。  
 ●  【备注：可在 项 ⽬ 启动 前明确 设 定 这 个 预 算， 监 控 执 ⾏。】  
 ●  性能要求（ Performance ）  
 ○  系统需确保⾼效、低延 迟运 ⾏，及 时 抓住市 场 交易机会。  
 ●  衡量指标：  
 ○  整个交易系 统（ 从接收 Alert 到下 单 成交）的平均延 迟  ≤ 500 ms ，最⼤延 迟 不超 过 1 
 秒 
 4.6 新增需求  （）  
 在近期美国 总统唐 纳 德 · 特朗普宣布⼤ 规 模关税措施后，全球⾦融市 场经历 了 剧 烈 动荡，导 致主要  
 股指⼤幅下跌，引 发 了 对 全球 经济 衰退的担 忧。    
 鉴于此类突 发 性的市 场 崩 盘 事件，建 议 在交易机器⼈中新增⼀个   紧急市场监 控与响 应 模 块（  
 Emergency Market Monitor and Response Module ）   ，其主要功   能包括：   
 1.  实时监控全球⾦融市 场 指 标   ： 持续获 取并分析主要股指（如 S&P 500 、道 琼 斯⼯ 业 平均指  
 数等）的 实时 数据，以及重要 财经 新 闻， 以 检测 异常波 动 或重⼤事件。   
 2.  设定预警 阈值   ： 根据历 史数据和 风险 偏好， 设 定市 场 波 动 的 预 警 阈值。 例如，当 S&P 500 
 指数在短 时间内下跌超 过 某个百分⽐，或 检测 到特定关 键词 的 财经 新 闻时， 触 发预 警。   
 3.  ⾃动触发紧 急响 应   ： 在预警触 发时， ⽴即 暂 停所有新的交易指令，并 执 ⾏ 预设 的 风险 控制  
 措施，如清 仓 所有持 仓， 以防⽌ 进 ⼀步 损 失。   
 4.  ⾼级别通知   ： 通过电 ⼦ 邮 件、短信或其他即 时 通 讯 ⼯具，向⽤ 户发 送 紧 急通知， 详细说 明  
 触发预警的原因和已 执 ⾏的措施，确保⽤ 户 及 时 了解情况。   
 通过引⼊ 该 模 块， 交易机器⼈能够在市 场 出 现剧 烈波 动时， ⾃ 动 采取保 护 性措施，降低潜在 损 失  
 ，并确保⽤ 户及 时 收到关 键 通知。  

 Functional requirements 
 明⽩了，我会 继续围绕  Trade Bot 的核⼼功能 闭环（监 听  Discord Alert → 解析  → 下 单） ⽣成  
 详细的  FUNCTIONAL REQUIREMENTS 实现 ⽅案。  
 我会在设计 中 预 留未来 扩 展配置管理与交易⽇志可 视 化的 结构， 但不会在  P0 阶 段 实现这 些功能  
 ，⽅便后 续进⼊  P1 时 快速接⼊。  
 稍等⽚刻，我整理好后 马 上提供 给 你。  
 交易机器⼈  P0 阶 段功能 实现设计  
 本设计聚焦于   P0 阶段   的交易机器⼈功能， 实现 从  Discord 获 取交易警 报 到通 过 券商  API ⾃ 动   下 
 单的闭环 流程。采⽤  Python 编 写， 运 ⾏于本地服 务 器（由⽤ 户 ⼿ 动 在交易前 启动， 交易完成后  
 关闭）。设计 将⽀持   模拟交易模式   与  实盘交易模式   的切换， 并以   IBKR  或  MooMoo  券商接⼝ 为  
 优先实现对 象。下⽂将 详细说 明模 块 划分、核⼼功能接⼝、模式切 换、 券商适配和数据 结构设计  
 ，并标注  P0 阶 段的  TODO 留⼝以便后 续  P1 阶 段 扩 展。  
 1. 模块结构 划分  
 P0 阶段交易机器⼈的架 构 可以划分 为 以下主要模 块， 它 们 各司其 职 并串 联 形成完整的交易流程：  
 ●  监听模块（ Listener ）   ：负责连 接  Discord 并 监 听特定 频 道的警 报 消息。⼀旦收到新的警  
 报消息，就将其 传递给 解析模 块处 理。  
 ●  解析模块（ Parser ）   ：负责解析  Discord 警 报 消息的内容，将其中的   股票代码（ symbol 
 ）  、  价格（ price ）   、  ⽅向（ bull/bear ）   、  策略编号   、  市场数据   等信息提取出来， 标 准化  
 封装为程序内部可⽤的数据 结构。  
 ●  风控模块（ RiskGuard ）   ：负责对 解析后的警 报 信息 进 ⾏ 风险评 估和策略校 验。 在下 单 前  
 执⾏⼀系列 检查（ 如交易信号有效性、 仓 位 风险、资 ⾦充⾜性等），决定是否允 许 下 单 或  
 对下单参数 进 ⾏ 调 整（例如 设 定下 单 数量、 过滤过频 繁信号等）。  
 ●  券商执⾏模 块（ Broker Executor ）   ：负责与券商  API 交互下 单。 通 过统 ⼀的   券商适配器  
 接⼝  调⽤具体券商（如  IBKR 、 MooMoo 、 TradeStation ）的  API ，将交易指令 发 送到   对应 
 券商的交易系 统。该 模 块 封装 实际  API 调 ⽤ 细节，实现 下 单动 作的 执 ⾏。  

 ●  主控逻辑 模 块（ Main Controller ）   ：作为各 组 件的 调 度中⼼，控制流程 顺 序。它初始化  
 各模块， 根据 监 听模 块 收到的警 报 依次 调 ⽤解析、 风 控和券商 执 ⾏模 块，实现 交易 闭环。  
 主控逻辑还负责 根据配置 选择运 ⾏模式（模 拟 或 实盘） 和⽬ 标 券商，并在关 键 步 骤 加⼊⽇  
 志记录等（ P0 阶 段 简 要 记录， P1 阶 段可 扩 展 为 完整⽇志 / 回放系 统）。  
 上述模块 以松耦合⽅式 协 作： 监 听模 块检测 到警 报 后触 发 解析模 块， 将得到的 标 准化数据 传给风  
 控模块检验， 最后交由券商 执 ⾏模 块 下 单。 各模 块 之 间 通 过预 定 义 的数据 对 象（如   AlertInfo  警 
 报信息对 象） 进 ⾏信息 传递。 整个架 构设计 注重模 块 化和可 扩 展性，使得   模拟交易  vs 实盘   、  多 
 券商适配   等在P0阶 段即可⽀撑，并 为 后 续 功能（如⽇志回放、 图 形界⾯配置） 预 留接⼝。  
 2. 各模块 核⼼功能和接⼝  
 下⾯详细说 明各模 块 的核⼼功能点和 对 外接⼝ 设计， 列出主要的函数和数据 结构， 便于开 发时 参  
 考实现。  
 监听模块（ Listener ）  
 核⼼功能：  
 监听模块负责连 接  Discord 服 务 器并 实时监 控指定 频 道的消息流。当⽬ 标频 道出 现 新的交易警 报  
 消息时，监 听模 块应 及 时 捕 获该 消息并将其内容 传递给 解析模 块处 理。 P0 阶 段可以采⽤ 简单 可靠  
 的实现， 例如使⽤  Discord 提供的  API 或 现 有 库（ 如   discord.py  ）登录机器⼈ 账户，   加⼊⽬标  
 服务器并 订阅 警 报频 道的消息事件。 监 听 过 程中需要考 虑 基本的健壮性，例如掉 线 重 连（ P0 可以  
 ⼿动重启 替代， P1 可加⼊⾃ 动 重 连 机制）。  
 接⼝设计：  
 ●  start_listening(channel_id, callback)  ：启动监 听指定 频 道的新消息。   参数为  
 频道ID和消息回 调 函数。当 监 听到新消息 时，调 ⽤提供的   callback(message)  将消息内  
 容传出（通常由主控 逻辑 提供的回 调 函数指向解析流程）。  
 ●  stop_listening()  ：停⽌监 听  Discord 消息（在交易 结 束或程序退出 时调 ⽤，⽤于 资  
 源清理）。  
 (P0 实现 可 选， 此功能在⼿ 动 停⽌程序 时 ⾃然 结 束， P1 可完善 为 更平滑的停⽌流程 ) 
 实现建议： 使⽤异步事件 驱动 模式。当  Discord 上有新消息 时， 触 发 on_message 事件，在事件  
 handler中 调 ⽤解析模 块。监 听模 块 本⾝不做 业务逻辑 判断，只 负责 把   原始消息字符串   传递出去。  
 解析模块（ Parser ）  
 核⼼功能：  
 解析模块 接收来⾃ 监 听模 块 的原始警 报 ⽂本（可能包含多⾏或特定格式内容）， 负责   提取关键 交  
 易要素   并封装为标 准数据 对 象。例如，从警 报 消息中解析出：交易 标 的代 码（ 如股票符号或合 约  

 代号）、警 报 触 发 价格、信号⽅向（看多 Bullish/ 看空 Bearish ）、策略 编 号或名称、相关的市 场  
 数据等字段。由于⽤ 户 提供的警 报 格式固定且包含上述信息，解析模 块 可以基于已知格式 实现 ⾼  
 效解析。  
 具体来说， 可使⽤字符串分析或正 则 表 达 式提取字段。例如，假 设 警 报 消息格式类似：  
 Bullish Bias 
 Detected Symbol: NQ 
 Price: 19656.00 
 Strategy: OrderFlowBot3.5 (ID 3) 
 Market: NDX 19455.68, SPX 4561.37 ... （市 场 相关数据）  
 解析模块应能   适配多语 ⾔格式   （若存在中英⽂版本警 报）。 例如，如果有中⽂警 报 格式， 对应 字  
 段标识可能是 **“看多 ”/“ 看空 ”** 或其他 术语， 因此解析器需要 针对 不同 语 ⾔ / 格式提供解析函数或配  
 置。在  P0 阶 段，可以假 设 警 报 格式固定不 变（ 例如始 终 英⽂）， 实现单 ⼀解析 逻辑 ；但 设计时  
 可考虑扩展性，如通 过 配置⽂件或策略模式 为 不同格式定制解析器。  
 接⼝设计：  
 ●  parse_alert(message_str) -> AlertInfo  ：解析给定的警 报 消息字符串   ，返回标  
 准化的警 报 信息 对 象（例如   AlertInfo  类实例， 详见 第 5 节）。 如果解析失 败（ 格式不  
 符或缺少字段），可返回   None  或抛出异常并由主控 逻辑 捕 获处 理。  
 ●  （可选）   detect_language(message_str) -> str  ：如果需要⽀持多 语 ⾔格   式，可  
 实现⼀个 简单的 语 ⾔ / 格式 检测， 根据消息内容 选择 相 应 解析 逻辑。【 P0 可以不 实现， 假  
 定单⼀格式； P1 若接⼊多来源警 报， 可拓展此功能】。  
 实现建议： 使⽤  Python 正 则 表 达 式或字符串操作提取字段。例如，可定 义 固定的正 则 模式匹配  
 "Symbol:\s  (?P\w+)" 等来抓取 值。 解析完成后将各字段填充到   AlertInfo  数据  结构实例中供后  
 续模块使⽤。 * 
 风控模块（ RiskGuard ）  
 核⼼功能：  
 风控模块 在交易 执 ⾏前充当安全⽹， 负责 根据 预 先 设 定的 规则对 交易信号 进 ⾏ 审查 和 调 整，以控  
 制风险。 核⼼功能包括：  
 ●  信号校验   ：检查解析后的警 报 信息是否 满 ⾜下 单 条件。例如，确 认 警 报 的   symbol  在⽀持  
 的交易列表内、价格数 值 合理、⽅向明确等。如果警 报 信息有异常（如⽆法 识 别的代 码，  
 价格为空等），可以拒 绝该 交易信号。  
 ●  仓位风险检查   ：根据当前 账户 情况和 预设风险 参数决定是否可开新 仓 位。例如， 检查账户  
 余额/保证⾦是否⾜够 执 ⾏ 该 笔交易；如果是看空信号，判断 账户 是否允 许 做空 该 股票（有  

 ⽆融券权限）等。 P0 阶 段可以 简 化 为： 每次信号都假定可以交易，但仍⾄少 检查   是否重  
 复持仓   （避免对同⼀ 标的 发 出多次相同⽅向 订单） 等基本 规则。  
 ●  下单参数 调 整   ：确定实际 下 单的数量、价格和 订单 类型等。解析模 块 提供了 标 的符号和触  
 发价，风 控模 块 可以根据策略和 风险 偏好决定采⽤   市价单   还是  限价单   、购买数量多少等。  
 P0 阶段若未集成复 杂仓 位管理，可采取 简单 策略：例如基于配置固定每次 购买   N  股或根据  
 预设的⾦ 额计 算股数。在模 拟 交易模式下，可以更灵活地 调试 数量⽽不 实际 交易。  
 ●  信号节流 / 过滤   ：防⽌过 于 频 繁的交易或重复信号。⽐如 设 定如果短 时间 内多次收到同⼀策  
 略对同⼀ 标的的警 报，仅执 ⾏第⼀次，后 续 忽略（或加⼊冷却 时间）。 此功能 P0 可 选实现  
 ，P1可加强。  
 接⼝设计：  
 ●  evaluate_alert(alert: AlertInfo) -> OrderInfo or None  ：对解析后的警  
 报信息进 ⾏ 评 估，返回具体下 单 指令数据（例如   OrderInfo  ，包含最 终 决定的下 单 ⽅  
 向、数量、价格等）。如果 风 控 检查 未通 过，则 返回  None （表⽰不 执 ⾏交易）。  
 ○  实现上，如果警 报 被拒 绝， 可在⽇志中 记录 原因（例如 “RiskGuard 拒 绝 下 单： 余  
 额不⾜ ”）。  
 ○  若通过，则 ⽣成下 单 所需的 结构。 P0 阶 段可 简单 地将  AlertInfo 的  symbol 和⽅向  
 填⼊ OrderInfo ，数量使⽤ 预设值， 价格使⽤市价（ price 字段可 仅 ⽤于参考或限价  
 单价）。  
 ●  （可选）   set_position_limits(...)  /  set_risk_params(...)  ：设置风 控相关的  
 参数接⼝，如 单 笔交易最⼤⾦ 额、单标 的允 许 的最⼤ 仓 位等。【 P0 可写死在配置， P1 提  
 供配置接⼝】。  
 实现建议： P0 可将 风 控 逻辑简 化，但代 码结构 上 为 将来 扩 展 预 留。⽐如，可以在  
 evaluate_alert  内部先后 调 ⽤多个 检查 函数（每个函数 负责 ⼀种 风险检查），这样 在 P1 阶 段  
 可以很⽅便地增加 / 修改 检查逻辑。还 可以在  OrderInfo 中增加字段⽤于后 续扩 展（如⽌ 损 价、⽬  
 标价等），当前先不 赋值， 只作 为 占位。  
 券商执⾏模 块（ Broker Executor ）  
 核⼼功能：  
 券商执⾏模 块 通 过调 ⽤券商提供的  API 将交易指令 发 送到市 场。 由于需要⽀持多个券商并⽅便 扩  
 展，我们设计 ⼀个 ** 券商适配器接⼝（ BrokerAdapter ） ** 来抽象下 单 操作。核⼼功能包括：  
 ●  券商 API 连 接   ：与指定券商建⽴ 连 接或会 话。 例如， 对 于  IBKR ，需要 启动  TWS 或  IB 
 Gateway 并通 过 其  API 接⼝ 进 ⾏通信； 对 于  MooMoo （富途），需要 调 ⽤其开放  API 接  

 ⼝并通过 本地  OpenD 服 务 交易。 P0 阶 段可以假定⽤ 户 已 经 在本地 运 ⾏好必要的券商客 户  
 端（如  IB Gateway ），券商 执 ⾏模 块负责 准 备  API 调 ⽤所需的 连 接参数（如主机、端  
 ⼝、API密 钥等）。  
 ●  订单下达   ：将风控模 块传 来的  OrderInfo 转换为 券商  API 所需的 请 求格式，并 调 ⽤相 应 ⽅  
 法下单。 包括指定交易 标 的、 买卖 ⽅向（   多头买⼊   或  卖出/做空   ）、数量、 订单 类型（市价  
 /限价）等信息。券商 执 ⾏模 块应统 ⼀ 这 些操作接⼝，不同券商的具体 实现细节 将由各⾃的  
 适配器类完成。  
 ●  结果处理   ：获取券商  API 的下 单结 果。例如， 订单 是否成功提交、返回的 订单 ID 、若失 败  
 包含错误 信息等。 P0 阶 段可以 简单 地判断 调 ⽤是否 报错，记录 成功或失 败 ； P1 阶 段可 扩  
 展为详细的 订单 状 态 跟踪（已成交、部分成交、已取消等）。  
 ●  模式切换 ⽀持   ：券商执 ⾏模 块 也需要⽀持   实盘  和  模拟  模式，在模 拟 模式下不真的 发 送 订单  
 给券商，⽽是模 拟 ⼀个成功响 应（这 ⼀部分在第 3 节详细 介 绍）。  
 接⼝设计：  
 为实现多券商⽀持，定 义 ⼀个抽象的券商适配器基类，例如 : 
 class BrokerAdapter: 
 def connect(self): ... 
 def place_order(self, order: OrderInfo) -> bool: ... 
 def disconnect(self): ... 
 每个具体券商有各⾃的 实现 类， 实现 上述接⼝：  
 ●  IBKRBrokerAdapter(BrokerAdapter)  ：通过  IBKR API 下 单。实现   时可能使⽤  IB 
 ⾃带的  Python API 库 或   ib_insync  等三⽅库。   connect()  负责连接到 IB Gateway/TWS 
 ，【P0阶 段】可以在初始化 时 ⾃ 动连 接⼀次。   place_order()  将  OrderInfo  映射为  
 IBKR 的下 单请求，例如使⽤   placeOrder(contract, order)  ⽅法提交。  
 ●  MooMooBrokerAdapter(BrokerAdapter)  ：通过  MooMoo(Futu)  API 下单。 例如使  
 ⽤富途开放平台的  API ，将 订单发 送到相 应 市 场。连 接可能涉及  OpenD 的本地服 务 接  
 ⼝。 
 ●  TradeStationBrokerAdapter(BrokerAdapter)  ：通过  TradeStation  API 下单。 可  
 能涉及  REST API 调 ⽤，使⽤ HTTP 请 求 发 送 订单。  
 ●  MockBrokerAdapter(BrokerAdapter)  ：模拟券商，⽤于   模拟交易模式   或测试。  
 place_order()  不实际发 送交易，⽽是打印或 记录 下 单 信息，直接返回成功。  

 典型接⼝函数：  
 ●  connect()  ：建⽴与券商的会 话连 接。   返回  连接是否成功。 对 需要 预连 接的券商（如  
 IBKR）调 ⽤其初始化流程； 对 于⽆需 长连 接的 REST 型券商，可以留空 实现。 P0 简单实现  
 即可，如  IBKR 在 对 象 创 建 时连 接。  
 ●  place_order(order: OrderInfo) -> bool  ：执⾏下 单 操作。参数 为标 准   化的订单  
 信息，返回布尔 值 表⽰提交是否成功（或抛出异常表⽰失 败）。 在 实现 中，将  OrderInfo 
 映射到券商 API 字段，如符号、⽅向、数量、价格等，然后 调 ⽤券商 SDK 。对 于  
 MockBrokerAdapter  ，可以直接打印 订单 模 拟执 ⾏。  
 ●  disconnect()  ：断开与券商的 连 接 / 会 话。 在程序 结 束 时调 ⽤，确保 资 源 释 放。  
 实现建议：   P0 阶段可以先 实现   IBKRBrokerAdapter  和⼀个   MockBrokerAdapter  （或使⽤  
 IBKR 的沙盒模式） 满 ⾜基本需求。 实现时 注意： IBKR 等 API 调 ⽤是异步的，可采⽤同步包装或  
 回调等待成交回 报。 由于 P0 不要求完整回 报处 理，可在下 单 后短 暂 停留确 认 提交成功即可。整个  
 券商执⾏模 块 通 过统 ⼀ Adapter 接⼝，可以在配置中 选择 使⽤何种券商 实现， ⽅便 扩 展新的券商⽽  
 ⽆需修改其他模 块逻辑。  
 主控逻辑 模 块（ Main Controller ）  
 核⼼功能：  
 主控逻辑 模 块统 筹整个交易机器⼈的 运 ⾏流程。其 职责 包括：根据配置初始化各⼦模 块（监 听、  
 解析、风 控、 执 ⾏）， 设 定 运 ⾏模式（模 拟 / 实盘） 和券商类型，然后 进 ⼊ 监 听 -> 处 理 -> 下 单 的循  
 环。在收到每条警 报 后，按 顺 序 调 ⽤解析模 块获 取 结构 化数据，再 调 ⽤ 风 控模 块评 估⽣成 订单，  
 最后调⽤券商 执 ⾏模 块 下 单。 主控模 块还负责 整体 错误处 理和 简单 ⽇志 记录， 确保即使某⼀步失  
 败也能继续监 听后 续 信号或者安全退出。  
 接⼝设计：  
 ●  run()  ：主⼊⼝函数， 启动 交易机器⼈。 执 ⾏步 骤：  
 1.  初始化配置   ：读取⽤ 户 配置（如使⽤的券商类型、 运 ⾏模式、固定下 单 数量等）。  
 初始化对应的  BrokerAdapter 实 例，例如根据配置 选择  IBKR 或  MooMoo ，以及  
 模拟还是 实盘 模式（ 详见 第 3 节）。  
 2.  启动监听   ：调⽤  Listener 的   start_listening(channel, callback)  ，将回  
 调设置为内部 处 理函数。例如：当有新消息 时，调 ⽤  
 handle_message(message)  。 
 3.  处理回调   ：  handle_message(message_str)  内部依次 执 ⾏：  
 a. 调⽤   Parser.parse_alert(message_str)  得到  AlertInfo  对象。  
 b. 若解析失 败（ 返回  None 或异常）， 记录 警告⽇志并跳 过该 消息。  

 c. 若解析成功， 调 ⽤   RiskGuard.evaluate_alert(alert_info)  得到 
 OrderInfo  。 
 d. 如果  RiskGuard 返回  None ，表⽰此信号被 风 控 拦 截， 记录 原因并 结 束 该 消息  
 处理。  
 e. 若得到有效的   OrderInfo  ，调⽤选定的  
 BrokerAdapter.place_order(order_info)  执⾏下单。  
 f. 根据返回 结 果， 记录   交易执⾏⽇志   ：成功则记录订单 ID 或 “ 下 单 成功 ” ，失 败则记  
 录错误信息。  
 4.  保持运⾏   ：  run()  调⽤后应 保持 进程不退出，持 续监 听 频 道消息（ Discord 监 听⾃  
 ⾝通常是异步阻塞模式，主控 逻辑 可依 赖 它阻塞）。由于 P0 阶 段在每次交易后⼈  
 ⼯关闭程序，可以不 实现 复 杂 的停⽌条件；当⽤ 户 ⼿ 动终 ⽌ 时 再 进 ⾏清理。  
 5.  清理退出   ：当⽤户停⽌机器⼈ 时，调 ⽤  Listener 的   stop_listening()  和 
 BrokerAdapter 的   disconnect()  进⾏资源清理，安全退出程序。  
 ●  （可选）   configure(mode, broker, params)  ：设置运 ⾏参数的接⼝。 P0 可   简单地  
 通过读取配置⽂件或全局 变 量，不需要 专 门的配置函数。但在 设计 上 预 留此接⼝， P1 阶  
 段可以通 过 它或⼀个配置模 块 来 调 整 运 ⾏ 时 参数（如切 换 券商或修改 风 控参数）。  
 实现建议：   主控逻辑应 尽量 简单 明了，按 顺 序 调 ⽤各模 块 功能。可以使⽤⽇志系 统 打印每步 结 果  
 （P0 ⽤简单 打印或写⽂件， P1 可接⼊更完善的⽇志模 块）。对 于异常情况，⽤   try/except  捕 
 获，例如券商 API 异常，捕 获 后 记录 并 继续运 ⾏ 监 听。主控模 块 也可以考 虑 在⼦模 块 之 间传递 上  
 下⽂信息（如在  AlertInfo 或  OrderInfo 增加 traceId ⽤于⽇志关 联 等），以便后 续调试 和回放。在  
 P0阶段这 些都可留作注 释 或  TODO 。  
 3. 模拟交易模式  vs 实盘 交易模式 设计  
 交易机器⼈需要⽀持 **“ 纸 上交易 ” （ Paper Trading ，模 拟）   和  实盘交易 ** 两种模式，并且做   到以最  
 ⼩代价进 ⾏切 换。这 意味着⼤部分代 码逻辑对 两种模式 应 当通⽤， 仅 在关 键 接⼝ 处 有所区别。 设  
 计思路如下：  
 ●  配置驱动的模式切 换：   在系统配置中增加⼀个 运 ⾏模式 标 志，例如   TRADE_MODE = 
 "paper"  或  "live"  。主控逻辑 在初始化 时读 取 该 配置，决定采⽤模 拟 模式 还 是 实盘 模  
 式。开发时 可以通 过环 境 变 量、配置⽂件或命令⾏参数来 设 置此 标 志， 实现 “ ⼀ 处 修改、  
 全局⽣效 ” 。  
 策略模式封装差异：   使⽤⾯向 对 象的   策略设计 模式   来封装交易模式的差异。在本 设计 中，主要体  
 现在券商 执 ⾏模 块： 通 过 提供真 实 券商适配器（ Real ）和模 拟 适配器（ Mock ）两套 实现，实现 接  
 ⼝⼀致、内部⾏ 为 不同的下 单 操作。主控 逻辑 根据 运 ⾏模式 选择 相 应 的适配器 实 例。例如 : 

 if CONFIG["MODE"] == "paper": 
 broker = MockBrokerAdapter() 
 else: 
 broker = IBKRBrokerAdapter()  # 或  MooMooBrokerAdapter 等  
 ●  这样，后 续的   broker.place_order(order)  调⽤对于主控来 说 是透明的：在 实盘   模 
 式下真正 发 送交易，在模 拟 模式下由  Mock 实现 内部模 拟（ ⽐如打印模 拟 交易）。 这 种模  
 式下，   除了⼀处创 建 BrokerAdapter 的代 码 外，其余流程⽆需修改   ，满⾜最⼩代价切 换 要  
 求。 
 ●  模拟模式的 实现细节：  
 ○  使⽤券商模 拟环 境  vs ⾃⾏模 拟：   ⼀些券商本⾝提供模 拟 交易 环 境（如  IBKR 提供  
 paper account ， MooMoo 也有模 拟盘）， 如果使⽤ 这 些 环 境，那么 对 于代 码 ⽽⾔  
 ⼏乎⽆需区别 处 理 —— 连 接不同的模 拟账户 即可，下 单 接⼝相同。 这 也可 视为 ⼀种  
 “实盘模式 ” ，只不 过资 ⾦是虚 拟 的。因此，另⼀种模 拟实现 是在  BrokerAdapter 层  
 ⾯不实际调 ⽤券商 API ，⽽是模 拟 ⾏ 为。 两种⽅案各有 优 点：利⽤券商模 拟盘 可以  
 测试完整流程但需要真 实连 接，使⽤  MockAdapter 则 不依 赖 外部系 统、 ⽅便快速  
 测试逻辑。   P0 阶段   可任选⼀种或同 时 ⽀持：例如，可以 让  MockAdapter 完成 简单  
 ⽇志记录， ⽽如果⽤ 户 希望更真 实测试， 也可配置使⽤  IBKR 的 paper 账户 通 过  
 IBKRBrokerAdapter 达 到模 拟 ⽬的。  
 ○  订单处理   ：在模拟 模式下， BrokerAdapter 的   place_order  可⽴即返回成功，并  
 ⽣成⼀个虚 拟订单 ID 或者 简单 打印 “[Paper] 下 单  XXX 股票  数量 Y 成功 ” 。也可以 维  
 护⼀张表 记录 所有模 拟订单（ P1 阶 段⽤于回放或分析）。  
 ○  风险控制   ：⼀般实盘 和模 拟 模式下 风 控 逻辑应 保持⼀致，以确保模 拟结 果具有参考  
 价值。设计 上不建 议为 两种模式采⽤不同的 风 控 规则， 除⾮出于 测试 ⽬的可以通 过  
 配置调整某些 检查项 开关。 P0 阶 段可 统 ⼀ 处 理。  
 ●  模式切换验证：   确保当切 换 配置后，程序能够正确 调 ⽤ 对应 模式的 实现。 例如，在 测试 中  
 运⾏⼀次模 拟 模式， 检查 不会触 发 真 实 交易，再切 换实盘 模式， 检查 能够与真 实 券商通  
 信。通过 良好的抽象，开 发 者只需 专 注于各模式下模 块 本⾝的正确性，⽽⽆需改 动 整体流  
 程代码。  
 总之，通 过   配置+策略模式   ，交易机器⼈可以   以最⼩代价   ⽀持模拟 与 实盘 两种 运 ⾏模式： 绝 ⼤部  
 分模块（监 听、解析、 风 控、主控）完全复⽤， 仅 券商 执 ⾏模 块 通 过 适配器 实现 ⾏ 为 差异。 这样  
 的设计也⽅便了后 续 功能 测试， 开 发 者可以先在模 拟 模式下 验证逻辑， 再⽆ 缝 切 换 到 实盘执 ⾏真  
 实交易。  
 4. 多券商适配架 构设计  

 为了⽀持  IBKR 、 MooMoo 、 TradeStation 等不同券商接⼝，并⽅便未来 扩 展新的券商，系 统 采⽤  
 适配器设计 模式   抽象券商接⼝。核⼼思想是定 义统 ⼀的   BrokerAdapter 接⼝   ，不同券商 实现该 接  
 ⼝。在主控 逻辑 中使⽤接⼝ 编 程⽽⾮依 赖 具体 实现， 从⽽ 实现   可插拔的券商⽀持   。设计要点如下  
 ： 
 ●  统⼀的券商接⼝定 义：   在第2节券商 执 ⾏模 块 部分，我 们 已⼤致定 义 了   BrokerAdapter 
 基类，其主要⽅法包括   connect()  、  place_order(order)  、  disconnect()  等。根  
 据需要， 还 可以 扩 充例如 查询账户 余 额   get_balance()  、查询持 仓   get_positions() 
 等接⼝（ P0 未必需要，但 设计时 可考 虑）。 关 键 是 这 些接⼝ 应 当覆盖交易机器⼈的需要  
 且能被不同券商 实现。 接⼝的函数 签 名和参数尽量 设计 得通⽤，⽐如   place_order  使⽤ 
 我们内部定 义的  OrderInfo 对 象⽽⾮某券商特有格式。  
 ●  券商实现 适配器：   针对每个⽀持的券商， 实现 ⼀个适配器类 继 承⾃  BrokerAdapter ，并封  
 装其API调 ⽤。以  IBKR 为 例： IBKR 需要先 连 接 TWS/IB Gateway ，然后下 单 需要 构 造  
 Contract 和  Order 对 象。我 们 的   IBKRBrokerAdapter.place_order()  实现内部会  
 根据 OrderInfo 创 建  IBKR API 需要的 对 象，再 调 ⽤  IBKR 的  API ⽅法下 单  (  Placing 
 Orders using TWS Python API | Trading Lesson  ) (  Using  Python, IBPy and the Interactive 
 Brokers API to Automate Trades  )。MooMoo 则 需要通 过  its Futu  API 提交交易 请求，可  
 以在  MooMooBrokerAdapter  中调⽤  Futu API 的下 单 函数。 TradeStation  提供 
 HTTP/REST API，则对应 适配器会 发 起 HTTP 请 求。   所有这些差异都被 隐 藏在各⾃适配器  
 内部实现 中   ，对外表 现 ⼀致。  
 适配器⼯⼚ / 选择 机制：   主控逻辑 在 运 ⾏开始 时， 根据配置的券商类型 选择实 例化 对应 的  
 BrokerAdapter 实现。 例如配置⽂件中 设 置   BROKER = "IBKR"  或  "MooMoo"  ，主控逻辑 会：  
 broker_type = CONFIG["BROKER"] 
 if broker_type == "IBKR": 
 broker = IBKRBrokerAdapter(...) 
 elif broker_type == "MooMoo": 
 broker = MooMooBrokerAdapter(...) 
 # ... 
 ●  可以将此 选择过程封装到⼀个   ⼯⼚函数   或  ⼯⼚类   中，如  
 BrokerAdapterFactory.create(broker_name)  返回正确的 实 例，以   保持主流程 简  
 洁。同样，这 ⾥也可以 结 合第 3 节 的模式：若模式是 paper 且某券商⽆内置模 拟盘，则 返回  
 MockBrokerAdapter  实例。⽐如：如果配置   BROKER="MooMoo"  且  MODE="paper" 
 ，⼯⼚可直接返回⼀个   MockBrokerAdapter  ，从⽽⽆需依 赖 真 实 富途 环 境。  
 ●  多券商共存与 扩展：   在设计上确保可以同 时 ⽀持多个券商 实 例（例如⽤ 户 可能有多个 账户  
 希望同时 下 单）。 P0 阶 段不需要 实现 多 账 号并⾏，但 结构 上不妨考 虑， ⽐如  
 BrokerAdapter 实 例不 设计为单 例，⽽是可根据需要 创 建多个。 对 于 扩 展新券商，只需新  
 增⼀个适配器类， 实现 接⼝并在⼯⼚⽅法中加⼊ 对应 分⽀，不会影响其他模 块。这 种解耦  

 保证了当⽤ 户 将来需要⽀持其他平台（如  Alpaca 、 Robinhood 等） 时， 可以快速集成。  
 ●  处理券商差异：   由于券商  API 在性能、 风 控 侧 有差异，适配器需要做相 应处 理。例如，  
 有的券商下 单 接⼝是同步的，有的是异步的；有的需要先 查询 合 约 ID ，有的直接使⽤符  
 号。可以在适配器内 实现 ⼀些 辅 助⽅法来弥合差异，确保   place_order  对上层来 说 尽可  
 能是即时 返回。在极端情况下，如果某券商流程与假 设 的接⼝差异 过 ⼤，可以 对  
 BrokerAdapter 接⼝做 调 整或在特定适配器中 override 额 外流程，但 总 体思想是   不改变   上 
 层模块与  BrokerAdapter 交互的接⼝契 约。  
 通过以上 设计，实现 ⼀个   ⾼内聚、低耦合   的多券商适配 层。对 于主控、 风 控等模 块 来 说， ⽆ 论对  
 接哪⼀家券商，都通 过 相同的⽅法 调 ⽤下 单 ； 对 于开 发 者来 说， 新增券商⽀持只需关注新适配器  
 模块的实现， 不影响系 统 其他部分。 这满 ⾜了 扩 展性的要求，也⽅便 调试  —— 可以⽤  
 MockAdapter 进 ⾏ 测试， 再切 换 到真 实 券商适配器做 实盘 交易。  
 5. 模块间 数据 结构传递设计  
 各模块之 间传递 信息需要清晰的   数据结构   或对象来承 载。 良好的数据 结构设计 能够降低模 块 耦  
 合、提⾼可 读 性。 P0 阶 段建 议 定 义 以下主要数据 结构：  
 警报信息 结构（ AlertInfo ）：   表⽰从  Discord 警 报 解析得到的 标 准化交易信号数据。可以   使⽤ 
 Python 的类或命名元 组 /dataclass 来 实现。 例如定 义 ⼀个  dataclass ：  
 from dataclasses import dataclass 
 @dataclass 
 class AlertInfo: 
 symbol: str        # 交易 标 的代 码  
 price: float       # 警 报给 出的价格（触 发 价或参考价）  
 direction: str     # ⽅向 : "bull" 或  "bear" （也可⽤ Enum 表⽰）  
 strategy_id: str   # 策略 编 号或名称  
 market_data: dict  # 其他市 场 数据，如指数 值 等（可 选， ⽤ dict 或⾃定 义 类型）  
 timestamp: datetime  # 警 报时间 戳（可 选，记录 信号 时间）  
 ●  Parser模 块 解析后会⽣成⼀个 AlertInfo 实 例，包含了交易决策所需的关 键 信息。之所以⽤  
 类⽽⾮直接⽤ dict ，是 为 了使字段含 义 明确，便于后 续 模 块 使⽤和 扩 展（例如增加字  
 段）。当然，⽤   dict  也可以实现， 但类 结构 有利于 IDE 提⽰和类型 检查。   P0 阶段   可根据  
 实际警报内容 调 整字段，例如如果警 报 未提供 timestamp 可以 暂 不使⽤ 该 字段。  
 market_data  字段⽤于存放 诸如 “ ⼤ 盘 指数 ” 、 “ 板 块涨 跌 ” 等警 报 提供的附加信息（例如上  
 例中的  SPX/NDX 值）， 便于 风 控或决策 时 参考。  
 订单信息 结构（ OrderInfo ）：   表⽰送往券商 执 ⾏模 块 的交易 订单 参数。 RiskGuard 模 块输 出   该结 
 构，BrokerAdapter 输 ⼊ 该结构。 OrderInfo 可以从 AlertInfo 派⽣，加上与下 单 相关的 细节， 例如 实  
 际下单数量、 订单 类型等。可定 义 如下：  

 @dataclass 
 class OrderInfo: 
 symbol: str         # 交易 标 的代 码  
 action: str         # 动 作 : "BUY" 或  "SELL" （或  "SELL_SHORT" 区分做空）  
 quantity: int       # 下 单 数量  
 order_type: str     # 订单 类型 : "MKT" 市价 单  或  "LMT" 限价 单  等  
 price: float = None # 下 单 价格 ( 限价 单 需要 ), 市价 单 可 为 None 或忽略  
 strategy_id: str = None  # 来源策略 编 号（可 选 附加信息）  
 ●  在P0阶段，可以采取 简单约 定： 对 于   bull  信号，   action  填 "BUY" ； 对 于   bear  信号，填  
 "SELL"（如果采⽤空 仓 做空策略， 则 ⽤  "SELL_SHORT" 明确做空 动 作）。   quantity  可 
 以由RiskGuard 根据 预设 决定，例如 统 ⼀配置 为 100 股或 1 张 合 约 等。   order_type  可默认  
 为 "MKT" （市价 单） 以确保⽴即成交；如果需要也可以⽀持限价 单， 例如使⽤警 报给 出的  
 价格作为 参考。 OrderInfo 还 可以包含   stop_loss  、  take_profit  等扩展字段（ P1  阶段 
 可能⽤到）， P0 先不使⽤但 结构 上可以留空以 备扩 展。  
 ●  流程中的数据 传递：  
 ○  Listener -> Parser ：   监听模块获 取到   原始消息字符串   ，传递给 解析模 块。这 ⾥可  
 以简单⽤字符串，因 为 解析模 块 接⼝就是接受字符串。  
 ○  Parser -> RiskGuard ：   解析后得到  AlertInfo 对 象， 传递给风 控模 块。 可以   直接 
 调⽤  riskguard.evaluate_alert(alert_info)  将对象传递。 由于  
 AlertInfo 是⾃定 义 类型， RiskGuard 可以直接 访问 其属性，如  
 alert_info.symbol  等。 
 ○  RiskGuard -> BrokerExecutor ：   风控模块 返回  OrderInfo 对 象（或   返回None 表  
 ⽰不下单）。 主控 逻辑 拿到  OrderInfo 后， 调 ⽤券商适配器  
 place_order(order_info)  。券商模 块内部再从  OrderInfo 提取必要字段 调   ⽤ 
 外部API。  
 ○  BrokerExecutor -> 主控 逻辑：   券商适配器返回下 单结 果状 态（ 成功 / 失 败）， 主  
 控逻辑基于此 记录 ⽇志或做 简单处 理。在需要 时， 也可以将 订单 回 执 封装 为 ⼀个 结  
 果对象，如   OrderResult  包含订单 ID 、状 态 等，但  P0 简单 ⽤  bool 或异常 处 理  
 即可。  
 ●  错误信息 传递：   在模块间传递过程中，如果 发 ⽣ 错误（ 如解析 错误、 下 单 异常）， 应 通 过  
 返回值或异常机制告知主控 逻辑。 P0 阶 段，可在解析失 败时 返回  None ，让 主控 逻辑 判断  
 处理；在下 单 失 败时 通 过 捕 获 异常或者返回  False 标记 失 败。 可以定 义统 ⼀的异常类，如  
 TradingBotError  、  ParseError  、  OrderError  等，提⾼代 码 可 读 性。   但注  意  模块之  
 间不应直接以异常作 为 正常流程⼀部分，除⾮真的是异常情况。⼤部分情况下，返回  

 None 或特定状 态码 由上 层 决定如何 处 理是更清晰的⽅式。  
 综上，建 议 使⽤   类或命名元 组   来管理数据 传递， 使各模 块 接⼝清晰。上例的  AlertInfo 和  
 OrderInfo 为 核⼼数据 结构， 开 发 者可根据 实际 警 报 信息 补 充字段。在 P0 实现时， 可先确保基本  
 字段正确 传递， 并通 过简单 打印或⽇志 验证 每步得到的数据 结构 内容是否符合 预 期。 这 种 结构 化  
 的数据传递为 后 续 功能 扩 展（例如在 AlertInfo 中加⼊更多 维 度信息、在 OrderInfo 中加⼊ 风 控批注  
 等）提供了便利。  
 6. P0 阶段的  TODO 留⼝和未来 扩 展  
 在 P0 阶 段，我 们专 注于 实现 基本的警 报监 听和⾃ 动 下 单 功能，舍弃了⼀些附加的复 杂 功能。但  
 在设计中需 为这 些未来可能加⼊的功能 预 留接⼝或注 释标记， 以便  P1 阶 段及以后能够平滑 扩  
 展。以下列出  P0 阶 段明确的  TODO 留⼝和 扩 展点：  
 ●  配置管理模 块：   （P1计划）   当前配置（如券商类型、 API 密 钥、 交易模式、默 认 下 单 数  
 量等）在 P0 中可能以全局 变 量或 简单 的配置⽂件 读 取 实现。 未来可引⼊ 专 门的配置管理模  
 块，⽀持从⽂件或 GUI 读 取配置、 热 更新参数等。建 议 在代 码 中关 键 的配置点添加   # 
 TODO: 将硬 编码 配置改 为读 取⾃配置模 块   注释。  
 ●  ⽇志记录 与回放：   （P1计划）   P0 阶段⽇志通 过简单 打印或写⽂本⽂件 实现，仅记录 关 键  
 事件。未来需要更健全的⽇志系 统，记录   每⼀笔警 报、 决策和下 单结 果   。例如，将  
 AlertInfo 和  OrderInfo 序列化存 储， 以⽀持   ⽇志回放   功能—— 即⽇后可以 读 取⽇志重 现   某 
 次警报触 发时机器⼈的决策 过 程，⽤于 调试 或策略分析。 设计 上可在主控 逻辑 的每个步 骤  
 加⼊钩⼦，将数据 发 送 给 ⽇志模 块（ P0 可留空或 简单实现）。 代 码 中可 标记   # TODO: 
 记录详细 ⽇志⽤于回放   。 
 ●  图形界⾯ / 控制台：   （P1计划）   ⽬前机器⼈通 过 ⼿ 动启动 / 停⽌，缺乏 运 ⾏ 时 的交互界  
 ⾯。未来可以开 发简单 的 Web 控制台或桌⾯ GUI ，实时显 ⽰机器⼈的状 态（ 当前 监 听的策  
 略、最近信号、持 仓 情况等），并允 许 ⽤ 户 ⼿ 动 触 发 操作（如平 仓 所有持 仓、暂 停 / 恢复 监  
 听等）。 为 此， P0 在架 构 上可考 虑 使⽤多 线 程或异步 I/O ，为 将来接⼝ 预 留空 间。 例如，  
 主控逻辑 可以 运 ⾏在后台 线 程，主 线 程将来可以跑⼀个 Flask ⽹ 络 服 务。 虽然 暂 不 实现，  
 但在代码 中可以 标记   # TODO: Web 控制台接⼝   或者将关 键 状 态 存⼊某个全局状 态对 象，  
 ⽅便将来界⾯ 读 取。  
 ●  完善风控策略：   P0 的  RiskGuard 逻辑 相 对简 洁，未来可以加⼊更多   风险控制和策略管理  
 功能。例如：  
 ○  根据账户资⾦ 动态调 整下 单 ⼿数（ 仓 位管理 优 化）。  
 ○  针对不同策略 编 号 设 置不同的 风 控 规则 和下 单 参数（策略模 块 化），如某策略信号  
 只交易较 ⼩ 仓 位。  

 ○  引⼊⽌损 ⽌盈机制： P1 可以 扩 展  OrderInfo ，风 控模 块计 算合理的⽌ 损 价和⽬ 标 价  
 ，并通过 券商 API 下 达  OCO 单（ One-Cancels-Other ）或附加条件 单。这 需要在  
 BrokerAdapter 接⼝增加⽀持，并在 风 控中 实现计 算 逻辑。  
 ○  多信号协调：如果同 时 收到多个策略 对 同⼀ 标 的 发 出相反信号，如何 处 理？ 这 些复  
 杂场景可在 P1+ 阶 段 处 理。  
 ●  多线程与性能 优 化：   P0 假定信号不 频 繁， 单线 程 处 理即可。若未来需要 应对 ⾼ 频 信号或  
 多标的并⾏交易，可引⼊多 线 程 / 异步 处 理架 构。 例如，每收到⼀个警 报启动 ⼀个 线 程 处 理  
 交易，或使⽤异步 io 避免阻塞 监 听。 为 此可在  P0 代 码 中将 处 理 逻辑 和 监 听解耦， 标记   # 
 TODO: 优 化并 发 性能   ，以便后 续 改造。  
 ●  异常处理与告警：   P0 对异常 简单处 理（ 记录 ⽇志、跳 过）。 后 续 可加强异常 处 理策略，  
 如在多次下 单 失 败 后通知⽤ 户（ 例如通 过  Discord 发 送⼀条提醒消息或 邮 件通知）。可以  
 在主控模 块设计 ⼀个通知函数（ P0 留空 实现）， 在重要异常 时调 ⽤。 标记   # TODO: 异常  
 通知机制  。 
 ●  ⽀持更多消息来源和类型：   将来可能不⽌来⾃ Discord 的警 报， 也可能接⼊其他消息源  
 （例如 Telegram 频 道、 HTTP 接⼝等）或者 处 理不同类型的信号（如新 闻 事件）。当前  
 Listener 和  Parser 设计较为 通⽤， P1 阶 段可以通 过 增加新  Listener 模 块实现 多源 监 听，  
 通过在  Parser 中判断消息类型 调 ⽤不同解析器来 实现扩 展。 这 部分在 设计 中已有⼀定体  
 现，只需在代 码 中保持模 块 化，新增来源 时实现对应 模 块 即可，⽆需⼤改架 构。  
 在代码实现 中，建 议 使⽤   TODO  注释和⽂档，清晰 标 明以上 扩 展 项 的位置。例如，在 风 控判断位  
 置添加 “  # TODO: 基于策略 动态调 整  quantity  ”，在下单 返回 处添加 “  # TODO: 将 执   ⾏结果写 
 ⼊数据库  ”等。这样既能提醒开 发 者后 续 完善，⼜确保 P0 交付的代 码 具 备 良好的可 读 性和可 扩 展性  
 ，为迈向 P1 做好 铺垫。  
 综上，本⽅案 详细规 划了交易机器⼈ P0 阶 段的模 块 划分和接⼝ 设计， 确保基本功能 闭环实现 的同  
 时，为模 拟 / 实盘 切 换、 多券商⽀持和后 续扩 展 预 留了⾜够的灵活性。开 发 者可以据此 结构 开始 编  
 码，实现 各模 块 功能并 进 ⾏集成 测试。 待 P0 验证稳 定后，再逐步按上述 TODO 要点 扩 充功能，完  
 善成为⼀个健壮的⾃ 动 交易系 统。  
 Diagram 
 ●  Automatically receive and parse quantitative alerts from Discord, and execute trades 
 based on these alerts. 
 ●  Provide backtesting functionality to validate strategies using historical data. 

 Non-functional requirements 
 ●  Performance: The system must quickly process data and execute trades with minimal 
 latency. 
 ●  Cost: Operational expenses must be kept cost-effective and within budget. 
 Recommended solution 
 Github repo 
 https://github.com/Leslie-mo/MultiAgent-AutoTrading 

